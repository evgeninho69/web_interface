#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏
"""

from autogen_agentchat.agents import AssistantAgent, UserProxyAgent
from autogen_agentchat.teams import GroupChat, GroupChatManager

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º OpenAI API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
import os

def main():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    api_key = os.environ.get("OPENAI_API_KEY")
    if not api_key:
        print("‚ùå –û—à–∏–±–∫–∞: OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("   export OPENAI_API_KEY='–≤–∞—à_–∫–ª—é—á_–∑–¥–µ—Å—å'")
        return

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è OpenAI
    config_list = [
        {
            "model": "gpt-4",
            "api_key": api_key,
        }
    ]

    # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏
    coder = AssistantAgent(
        name="coder",
        system_message="–¢—ã –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç. –ü–æ–º–æ–≥–∞–π —Å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ–º –∫–æ–¥–∞ –∏ —Ä–µ—à–µ–Ω–∏–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º.",
        llm_config={"config_list": config_list, "temperature": 0.7}
    )
    
    analyst = AssistantAgent(
        name="analyst",
        system_message="–¢—ã –∞–Ω–∞–ª–∏—Ç–∏–∫ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–º–æ–≥–∞–π —Å –∞–Ω–∞–ª–∏–∑–æ–º, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π.",
        llm_config={"config_list": config_list, "temperature": 0.7}
    )
    
    writer = AssistantAgent(
        name="writer",
        system_message="–¢—ã –ø–∏—Å–∞—Ç–µ–ª—å –∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä. –ü–æ–º–æ–≥–∞–π —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–æ–≤, –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π.",
        llm_config={"config_list": config_list, "temperature": 0.7}
    )

    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–ø—Ä–æ–∫—Å–∏
    user_proxy = UserProxyAgent(
        name="user_proxy",
        human_input_mode="ALWAYS",
        max_consecutive_auto_reply=10,
        is_termination_msg=lambda x: x.get("content", "").rstrip().endswith("TERMINATE"),
        code_execution_config={"work_dir": "workspace"},
        llm_config={"config_list": config_list}
    )

    # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
    groupchat = GroupChat(
        agents=[user_proxy, coder, analyst, writer],
        messages=[],
        max_round=50
    )

    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞
    manager = GroupChatManager(
        groupchat=groupchat,
        llm_config={"config_list": config_list}
    )

    # –ù–∞—á–∏–Ω–∞–µ–º –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
    print("ü§ñ AutoGen GroupChat –∑–∞–ø—É—â–µ–Ω!")
    print("üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç, –ê–Ω–∞–ª–∏—Ç–∏–∫, –ü–∏—Å–∞—Ç–µ–ª—å")
    print("üí¨ –ù–∞—á–Ω–∏—Ç–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ (–≤–≤–µ–¥–∏—Ç–µ 'quit' –¥–ª—è –≤—ã—Ö–æ–¥–∞)")
    print("-" * 50)
    
    user_proxy.initiate_chat(
        manager,
        message="–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –î–∞–≤–∞–π—Ç–µ –æ–±—Å—É–¥–∏–º, –∫–∞–∫ —Å–æ–∑–¥–∞—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏. –ö–∞–∂–¥—ã–π –∏–∑ –≤–∞—Å –º–æ–∂–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ–π –≤–∑–≥–ª—è–¥ –Ω–∞ –∑–∞–¥–∞—á—É."
    )

if __name__ == "__main__":
    main()
